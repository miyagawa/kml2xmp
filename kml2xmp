#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

require 'nokogiri'
require 'time'

class CLI
  attr_reader :kml, :photos, :points

  def initialize(args)
    @kml = args.shift
    @photos = EnumerateFiles.new(args)
    @points = TrackPoints.new
  end

  def run
    load_history
    geotag_photos
  end

  def load_history
    doc = Nokogiri::XML(File.open(kml))
    doc.remove_namespaces!
    doc.xpath('//Placemark').each do |node|
      mark = Placemark.new
      node.xpath('./LineString/coordinates | ./Point/coordinates | ./TimeSpan/begin | ./TimeSpan/end').each do |node|
        case node.name
        when "begin"
          mark.begin = Time.parse(node.text)
        when "end"
          mark.end = Time.parse(node.text)
        when "coordinates"
          mark.coords = node.text.split(' ').map {|t| Location.new(t) }
        end
      end

      points << mark.points
    end
  end

  def handles?(photo)
    photo.image? && !photo.geotagged?
  end

  def geotag_photos
    photos.each do |photo|
      next unless handles?(photo)
      point = points.point_in(photo.taken_time)
      if point
        puts "Geotagging #{photo.file} as #{point.location} at #{point.time}"
        photo.geotag(point.location)
      else
        puts "Couldn't find location for #{photo.file} at #{photo.taken_time}"
      end
    end
  end
end

class EnumerateFiles
  def initialize(files)
    @files = files
  end

  def each
    @files.each do |file|
      if File.directory?(file)
        Dir.glob("#{file}/**/*").each do |f|
          yield Photo.new(f)
        end
      else
        yield Photo.new(file)
      end
    end
  end
end

class Placemark
  attr_accessor :begin, :end, :coords

  def points
    case coords.size
    when 1
      [TrackPoint.new(@begin, coords.first), TrackPoint.new(@end, coords.first)]
    else
      coords.each_with_index.map { |coord, i|
        time = @begin + (@end - @begin) * i / (coords.size - 1)
        TrackPoint.new(time, coord)
      }
    end
  end
end

class Photo
  attr_reader :file

  def initialize(file)
    @file = file
  end

  def image?
    /\.(RW2|JPG|ORF)$/ === @file
  end

  def geotagged?
    if ENV["OVERWRITE_GEOTAG"]
      return false
    end
    /GPS Latitude\s+:\s+\d+/.match(`exiftool -GPSLatitude #{file}`)
  end

  def taken_time
    # assume local timezone
    @time ||= begin
      match = /creation: (\d{4}):(\d\d):(\d\d) (\d\d):(\d\d):(\d\d)$/.match(`sips -g creation #{@file}`)
      Time.new(*match[1..6]) if match
    end
  end

  def geotag(location)
    system 'exiftool', '-overwrite_original', '-preserve', "-GPSLatitude*=#{location.lat}", "-GPSLongitude*=#{location.lon}", "-GPSAltitude*=#{location.alt}", file
  end
end

class TrackPoints
  def initialize
    @points = []
  end

  def <<(point)
    @points.concat(point)
  end

  def time_range
    @points.first.time.to_f .. @points.last.time.to_f
  end

  def point_in(time)
    return unless time_range.cover?(time.to_f)

    found = nil
    @points.each do |point|
      if time >= point.time
        found = point
      end
    end

    found
  end
end

class TrackPoint
  attr_reader :time, :location

  def initialize(*args)
    @time, @location = *args
  end
end

class Location
  attr_reader :lon, :lat, :alt
  def initialize(text)
    @text = text
    @lon, @lat, @alt = text.split(',')
  end

  def to_s
    @text
  end

  def gpslat
    gps_format @lat.to_f, 'N', 'S'
  end

  def gpslon
    gps_format @lon.to_f, 'E', 'W'
  end

  def gps_format(value, pos, neg)
    flag = value > 0 ? pos : neg
    degrees = value.abs.floor
    minutes = 60 * (value.abs - degrees)
    sprintf "%d,%.6f%s", degrees, minutes, flag
  end
end

CLI.new(ARGV).run

